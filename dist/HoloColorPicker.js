var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import React from "react";
import { I18nManager, Image, InteractionManager, Slider, StyleSheet, TouchableOpacity, View, } from "react-native";
import tinycolor from "tinycolor2";
import { createPanResponder } from "./utils";
var HoloColorPicker = /** @class */ (function (_super) {
    __extends(HoloColorPicker, _super);
    function HoloColorPicker(props, ctx) {
        var _this = _super.call(this, props, ctx) || this;
        _this._handleColorChange = function (_a) {
            var x = _a.x, y = _a.y;
            var _b = _this._getColor(), s = _b.s, v = _b.v;
            var marginLeft = (_this._layout.width - _this.state.pickerSize) / 2;
            var marginTop = (_this._layout.height - _this.state.pickerSize) / 2;
            var relativeX = x - _this._pageX - marginLeft;
            var relativeY = y - _this._pageY - marginTop;
            var h = _this._computeHValue(relativeX, relativeY);
            _this._onColorChange({ h: h, s: s, v: v });
            return true;
        };
        var state = {
            color: { h: 0, s: 1, v: 1 },
            pickerSize: null,
        };
        if (props.oldColor) {
            state.color = tinycolor(props.oldColor).toHsv();
        }
        if (props.defaultColor) {
            state.color = tinycolor(props.defaultColor).toHsv();
        }
        _this.state = state;
        _this._layout = { width: 0, height: 0, x: 0, y: 0 };
        _this._pageX = 0;
        _this._pageY = 0;
        _this._onLayout = _this._onLayout.bind(_this);
        _this._onSValueChange = _this._onSValueChange.bind(_this);
        _this._onVValueChange = _this._onVValueChange.bind(_this);
        _this._onColorSelected = _this._onColorSelected.bind(_this);
        _this._onOldColorSelected = _this._onOldColorSelected.bind(_this);
        _this._isRTL = I18nManager.isRTL;
        _this._pickerResponder = createPanResponder({
            onStart: function (point2D) {
                props.onPickerStart && props.onPickerStart();
                return _this._handleColorChange(point2D);
            },
            onMove: _this._handleColorChange,
            onEnd: function () {
                props.onPickerEnd && props.onPickerEnd();
                return true;
            }
        });
        return _this;
    }
    HoloColorPicker.prototype._getColor = function () {
        var passedColor = typeof this.props.color === "string"
            ? tinycolor(this.props.color).toHsv()
            : this.props.color;
        return passedColor || this.state.color;
    };
    HoloColorPicker.prototype._onColorSelected = function () {
        var onColorSelected = this.props.onColorSelected;
        var color = tinycolor(this._getColor()).toHexString();
        onColorSelected && onColorSelected(color);
    };
    HoloColorPicker.prototype._onOldColorSelected = function () {
        var _a = this.props, oldColor = _a.oldColor, onOldColorSelected = _a.onOldColorSelected;
        var color = tinycolor(oldColor);
        this.setState({ color: color.toHsv() });
        onOldColorSelected && onOldColorSelected(color.toHexString());
    };
    HoloColorPicker.prototype._onSValueChange = function (s) {
        var _a = this._getColor(), h = _a.h, v = _a.v;
        this._onColorChange({ h: h, s: s, v: v });
    };
    HoloColorPicker.prototype._onVValueChange = function (v) {
        var _a = this._getColor(), h = _a.h, s = _a.s;
        this._onColorChange({ h: h, s: s, v: v });
    };
    HoloColorPicker.prototype._onColorChange = function (color) {
        this.setState({ color: color });
        if (this.props.onColorChange) {
            this.props.onColorChange(color);
        }
    };
    HoloColorPicker.prototype._onLayout = function (l) {
        var _this = this;
        this._layout = l.nativeEvent.layout;
        var _a = this._layout, width = _a.width, height = _a.height;
        var pickerSize = Math.min(width, height);
        if (this.state.pickerSize !== pickerSize) {
            this.setState({ pickerSize: pickerSize });
        }
        // layout.x, layout.y is always 0
        // we always measure because layout is the same even though picker is moved on the page
        InteractionManager.runAfterInteractions(function () {
            // measure only after (possible) animation ended
            _this.refs.pickerContainer &&
                _this.refs.pickerContainer.measure(function (x, y, width, height, pageX, pageY) {
                    // picker position in the screen
                    _this._pageX = pageX;
                    _this._pageY = pageY;
                });
        });
    };
    HoloColorPicker.prototype._computeHValue = function (x, y) {
        var mx = this.state.pickerSize / 2;
        var my = this.state.pickerSize / 2;
        var dx = x - mx;
        var dy = y - my;
        var rad = Math.atan2(dx, dy) + Math.PI + Math.PI / 2;
        return ((rad * 180) / Math.PI) % 360;
    };
    HoloColorPicker.prototype._hValueToRad = function (deg) {
        var rad = (deg * Math.PI) / 180;
        return rad - Math.PI - Math.PI / 2;
    };
    HoloColorPicker.prototype._getSlider = function () {
        if (this.props.hideSliders) {
            return undefined;
        }
        if (this.props.sliderComponent) {
            return this.props.sliderComponent;
        }
        if (!Slider) {
            throw new Error("You need to install `@react-native-community/slider` and pass it (or any other Slider compatible component) as `sliderComponent` prop");
        }
        return Slider;
    };
    HoloColorPicker.prototype.getColor = function () {
        return tinycolor(this._getColor()).toHexString();
    };
    HoloColorPicker.prototype.render = function () {
        var pickerSize = this.state.pickerSize;
        var _a = this.props, oldColor = _a.oldColor, indicatorColorOverride = _a.indicatorColorOverride, style = _a.style;
        var color = this._getColor();
        var h = color.h, s = color.s, v = color.v;
        var angle = this._hValueToRad(h);
        var selectedColor = tinycolor(color).toHexString();
        var indicatorColor = tinycolor({ h: h, s: 1, v: 1 }).toHexString();
        var computed = makeComputedStyles({
            pickerSize: pickerSize,
            selectedColor: selectedColor,
            indicatorColor: indicatorColorOverride !== null && indicatorColorOverride !== void 0 ? indicatorColorOverride : indicatorColor,
            oldColor: oldColor,
            angle: angle,
            isRTL: this._isRTL,
        });
        var SliderComp = this._getSlider();
        return (<View style={style}>
        <View onLayout={this._onLayout} ref="pickerContainer" style={styles.pickerContainer}>
          {!pickerSize ? null : (<View>
              <View {...this._pickerResponder.panHandlers} style={[computed.picker]} collapsable={false}>
                <Image source={require("../resources/color-circle.png")} resizeMode="contain" style={[styles.pickerImage]}/>
                <View style={[styles.pickerIndicator, computed.pickerIndicator]}/>
              </View>
              {oldColor && (<TouchableOpacity style={[styles.selectedPreview, computed.selectedPreview]} onPress={this._onColorSelected} activeOpacity={0.7}/>)}
              {oldColor && (<TouchableOpacity style={[styles.originalPreview, computed.originalPreview]} onPress={this._onOldColorSelected} activeOpacity={0.7}/>)}
              {!oldColor && (<TouchableOpacity style={[
            styles.selectedFullPreview,
            computed.selectedFullPreview,
        ]} onPress={this._onColorSelected} activeOpacity={0.7}/>)}
            </View>)}
        </View>
        {this.props.hideSliders ? null : (<View>
            <SliderComp value={s} onValueChange={this._onSValueChange}/>
            <SliderComp value={v} onValueChange={this._onVValueChange}/>
          </View>)}
      </View>);
    };
    return HoloColorPicker;
}(React.PureComponent));
export { HoloColorPicker };
var makeComputedStyles = function (_a) {
    var _b;
    var indicatorColor = _a.indicatorColor, selectedColor = _a.selectedColor, oldColor = _a.oldColor, angle = _a.angle, pickerSize = _a.pickerSize, isRTL = _a.isRTL;
    var summarySize = 0.5 * pickerSize;
    var indicatorPickerRatio = 42 / 510; // computed from picker image
    var indicatorSize = indicatorPickerRatio * pickerSize;
    var pickerPadding = indicatorSize / 3;
    var indicatorRadius = pickerSize / 2 - indicatorSize / 2 - pickerPadding;
    var mx = pickerSize / 2;
    var my = pickerSize / 2;
    var dx = Math.cos(angle) * indicatorRadius;
    var dy = Math.sin(angle) * indicatorRadius;
    return {
        picker: {
            padding: pickerPadding,
            width: pickerSize,
            height: pickerSize,
        },
        pickerIndicator: (_b = {
                top: mx + dx - indicatorSize / 2
            },
            _b[isRTL ? "right" : "left"] = my + dy - indicatorSize / 2,
            _b.width = indicatorSize,
            _b.height = indicatorSize,
            _b.borderRadius = indicatorSize / 2,
            _b.backgroundColor = indicatorColor,
            _b),
        selectedPreview: {
            width: summarySize / 2,
            height: summarySize,
            top: pickerSize / 2 - summarySize / 2,
            left: Math.floor(pickerSize / 2),
            borderTopRightRadius: summarySize / 2,
            borderBottomRightRadius: summarySize / 2,
            backgroundColor: selectedColor,
        },
        originalPreview: {
            width: Math.ceil(summarySize / 2),
            height: summarySize,
            top: pickerSize / 2 - summarySize / 2,
            left: pickerSize / 2 - summarySize / 2,
            borderTopLeftRadius: summarySize / 2,
            borderBottomLeftRadius: summarySize / 2,
            backgroundColor: oldColor,
        },
        selectedFullPreview: {
            width: summarySize,
            height: summarySize,
            top: pickerSize / 2 - summarySize / 2,
            left: pickerSize / 2 - summarySize / 2,
            borderRadius: summarySize / 2,
            backgroundColor: selectedColor,
        },
    };
};
var styles = StyleSheet.create({
    pickerContainer: {
        flex: 1,
        alignItems: "center",
        justifyContent: "center",
    },
    pickerImage: {
        flex: 1,
        width: null,
        height: null,
    },
    pickerIndicator: {
        position: "absolute",
        // Shadow only works on iOS.
        shadowColor: "black",
        shadowOpacity: 0.3,
        shadowOffset: { width: 3, height: 3 },
        shadowRadius: 4,
        // This will elevate the view on Android, causing shadow to be drawn.
        elevation: 5,
    },
    selectedPreview: {
        position: "absolute",
        borderLeftWidth: 0,
    },
    originalPreview: {
        position: "absolute",
        borderRightWidth: 0,
    },
    selectedFullPreview: {
        position: "absolute",
    },
    pickerAlignment: {
        alignItems: "center",
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSG9sb0NvbG9yUGlja2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0hvbG9Db2xvclBpY2tlci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQTtBQUN6QixPQUFPLEVBQ0wsV0FBVyxFQUNYLEtBQUssRUFDTCxrQkFBa0IsRUFFbEIsTUFBTSxFQUNOLFVBQVUsRUFDVixnQkFBZ0IsRUFDaEIsSUFBSSxHQUNMLE1BQU0sY0FBYyxDQUFBO0FBQ3JCLE9BQU8sU0FBUyxNQUFNLFlBQVksQ0FBQTtBQUdsQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxTQUFTLENBQUE7QUFnQjVDO0lBQXFDLG1DQUdwQztJQU9DLHlCQUFZLEtBQXVCLEVBQUUsR0FBUTtRQUE3QyxZQUNFLGtCQUFNLEtBQUssRUFBRSxHQUFHLENBQUMsU0FnQ2xCO1FBeUVELHdCQUFrQixHQUFHLFVBQUMsRUFBaUI7Z0JBQWYsQ0FBQyxPQUFBLEVBQUUsQ0FBQyxPQUFBO1lBQ3BCLElBQUEsS0FBVyxLQUFJLENBQUMsU0FBUyxFQUFFLEVBQXpCLENBQUMsT0FBQSxFQUFFLENBQUMsT0FBcUIsQ0FBQTtZQUNqQyxJQUFNLFVBQVUsR0FBRyxDQUFDLEtBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLEtBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQ25FLElBQU0sU0FBUyxHQUFHLENBQUMsS0FBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsS0FBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDbkUsSUFBTSxTQUFTLEdBQUcsQ0FBQyxHQUFHLEtBQUksQ0FBQyxNQUFNLEdBQUcsVUFBVSxDQUFBO1lBQzlDLElBQU0sU0FBUyxHQUFHLENBQUMsR0FBRyxLQUFJLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQTtZQUM3QyxJ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Q2xCLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRTtRQUNyQyxZQUFZLEVBQUUsQ0FBQztRQUVmLHFFQUFxRTtRQUNyRSxTQUFTLEVBQUUsQ0FBQztLQUNiO0lBQ0QsZUFBZSxFQUFFO1FBQ2YsUUFBUSxFQUFFLFVBQVU7UUFDcEIsZUFBZSxFQUFFLENBQUM7S0FDbkI7SUFDRCxlQUFlLEVBQUU7UUFDZixRQUFRLEVBQUUsVUFBVTtRQUNwQixnQkFBZ0IsRUFBRSxDQUFDO0tBQ3BCO0lBQ0QsbUJBQW1CLEVBQUU7UUFDbkIsUUFBUSxFQUFFLFVBQVU7S0FDckI7SUFDRCxlQUFlLEVBQUU7UUFDZixVQUFVLEVBQUUsUUFBUTtLQUNyQjtDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IHtcbiAgSTE4bk1hbmFnZXIsXG4gIEltYWdlLFxuICBJbnRlcmFjdGlvbk1hbmFnZXIsXG4gIFBhblJlc3BvbmRlckluc3RhbmNlLFxuICBTbGlkZXIsXG4gIFN0eWxlU2hlZXQsXG4gIFRvdWNoYWJsZU9wYWNpdHksXG4gIFZpZXcsXG59IGZyb20gXCJyZWFjdC1uYXRpdmVcIlxuaW1wb3J0IHRpbnljb2xvciBmcm9tIFwidGlueWNvbG9yMlwiXG5cbmltcG9ydCB7IEhzdkNvbG9yLCBJUGlja2VyUHJvcHMsIFBvaW50MkQgfSBmcm9tIFwiLi90eXBlSGVscGVyc1wiXG5pbXBvcnQgeyBjcmVhdGVQYW5SZXNwb25kZXIgfSBmcm9tIFwiLi91dGlsc1wiXG5cbnR5cGUgU2xpZGVyUHJvcHMgPSB7XG4gIG9uVmFsdWVDaGFuZ2U/OiAodmFsdWU6IG51bWJlcikgPT4gdm9pZDtcbiAgdmFsdWU/OiBudW1iZXI7XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIElIb2xvUGlja2VyUHJvcHMgZXh0ZW5kcyBJUGlja2VyUHJvcHMge1xuICBzbGlkZXJDb21wb25lbnQ/OiBSZWFjdC5Db21wb25lbnQ8U2xpZGVyUHJvcHM+O1xufVxuXG5leHBvcnQgdHlwZSBJSG9sb1BpY2tlclN0YXRlID0ge1xuICBjb2xvcjogSHN2Q29sb3I7XG4gIHBpY2tlclNpemU6IG51bWJlcjtcbn07XG5cbmV4cG9ydCBjbGFzcyBIb2xvQ29sb3JQaWNrZXIgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PFxuICBJSG9sb1BpY2tlclByb3BzLFxuICBJSG9sb1BpY2tlclN0YXRlXG4+IHtcbiAgcHJpdmF0ZSBfbGF5b3V0OiB7IHdpZHRoOiBudW1iZXI7IGhlaWdodDogbnVtYmVyOyB4OiBudW1iZXI7IHk6IG51bWJlciB9O1xuICBwcml2YXRlIF9wYWdlWDogbnVtYmVyO1xuICBwcml2YXRlIF9wYWdlWTogbnVtYmVyO1xuICBwcml2YXRlIF9pc1JUTDogYm9vbGVhbjtcbiAgcHJpdmF0ZSBfcGlja2VyUmVzcG9uZGVyOiBQYW5SZXNwb25kZXJJbnN0YW5jZTtcblxuICBjb25zdHJ1Y3Rvcihwcm9wczogSUhvbG9QaWNrZXJQcm9wcywgY3R4OiBhbnkpIHtcbiAgICBzdXBlcihwcm9wcywgY3R4KVxuICAgIGNvbnN0IHN0YXRlID0ge1xuICAgICAgY29sb3I6IHsgaDogMCwgczogMSwgdjogMSB9LFxuICAgICAgcGlja2VyU2l6ZTogbnVsbCxcbiAgICB9XG4gICAgaWYgKHByb3BzLm9sZENvbG9yKSB7XG4gICAgICBzdGF0ZS5jb2xvciA9IHRpbnljb2xvcihwcm9wcy5vbGRDb2xvcikudG9Ic3YoKVxuICAgIH1cbiAgICBpZiAocHJvcHMuZGVmYXVsdENvbG9yKSB7XG4gICAgICBzdGF0ZS5jb2xvciA9IHRpbnljb2xvcihwcm9wcy5kZWZhdWx0Q29sb3IpLnRvSHN2KClcbiAgICB9XG4gICAgdGhpcy5zdGF0ZSA9IHN0YXRlXG4gICAgdGhpcy5fbGF5b3V0ID0geyB3aWR0aDogMCwgaGVpZ2h0OiAwLCB4OiAwLCB5OiAwIH1cbiAgICB0aGlzLl9wYWdlWCA9IDBcbiAgICB0aGlzLl9wYWdlWSA9IDBcbiAgICB0aGlzLl9vbkxheW91dCA9IHRoaXMuX29uTGF5b3V0LmJpbmQodGhpcylcbiAgICB0aGlzLl9vblNWYWx1ZUNoYW5nZSA9IHRoaXMuX29uU1ZhbHVlQ2hhbmdlLmJpbmQodGhpcylcbiAgICB0aGlzLl9vblZWYWx1ZUNoYW5nZSA9IHRoaXMuX29uVlZhbHVlQ2hhbmdlLmJpbmQodGhpcylcbiAgICB0aGlzLl9vbkNvbG9yU2VsZWN0ZWQgPSB0aGlzLl9vbkNvbG9yU2VsZWN0ZWQuYmluZCh0aGlzKVxuICAgIHRoaXMuX29uT2xkQ29sb3JTZWxlY3RlZCA9IHRoaXMuX29uT2xkQ29sb3JTZWxlY3RlZC5iaW5kKHRoaXMpXG4gICAgdGhpcy5faXNSVEwgPSBJMThuTWFuYWdlci5pc1JUTFxuICAgIHRoaXMuX3BpY2tlclJlc3BvbmRlciA9IGNyZWF0ZVBhblJlc3BvbmRlcih7XG4gICAgICBvblN0YXJ0OiAocG9pbnQyRCkgPT4ge1xuICAgICAgICBwcm9wcy5vblBpY2tlclN0YXJ0ICYmIHByb3BzLm9uUGlja2VyU3RhcnQoKVxuICAgICAgICByZXR1cm4gdGhpcy5faGFuZGxlQ29sb3JDaGFuZ2UocG9pbnQyRClcbiAgICAgIH0sXG4gICAgICBvbk1vdmU6IHRoaXMuX2hhbmRsZUNvbG9yQ2hhbmdlLFxuICAgICAgb25FbmQ6ICgpID0+IHtcbiAgICAgICAgcHJvcHMub25QaWNrZXJFbmQgJiYgcHJvcHMub25QaWNrZXJFbmQoKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgX2dldENvbG9yKCkge1xuICAgIGNvbnN0IHBhc3NlZENvbG9yID1cbiAgICAgIHR5cGVvZiB0aGlzLnByb3BzLmNvbG9yID09PSBcInN0cmluZ1wiXG4gICAgICAgID8gdGlueWNvbG9yKHRoaXMucHJvcHMuY29sb3IpLnRvSHN2KClcbiAgICAgICAgOiB0aGlzLnByb3BzLmNvbG9yXG4gICAgcmV0dXJuIHBhc3NlZENvbG9yIHx8IHRoaXMuc3RhdGUuY29sb3JcbiAgfVxuXG4gIF9vbkNvbG9yU2VsZWN0ZWQoKSB7XG4gICAgY29uc3QgeyBvbkNvbG9yU2VsZWN0ZWQgfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCBjb2xvciA9IHRpbnljb2xvcih0aGlzLl9nZXRDb2xvcigpKS50b0hleFN0cmluZygpXG4gICAgb25Db2xvclNlbGVjdGVkICYmIG9uQ29sb3JTZWxlY3RlZChjb2xvcilcbiAgfVxuXG4gIF9vbk9sZENvbG9yU2VsZWN0ZWQoKSB7XG4gICAgY29uc3QgeyBvbGRDb2xvciwgb25PbGRDb2xvclNlbGVjdGVkIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgY29sb3IgPSB0aW55Y29sb3Iob2xkQ29sb3IpXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGNvbG9yOiBjb2xvci50b0hzdigpIH0pXG4gICAgb25PbGRDb2xvclNlbGVjdGVkICYmIG9uT2xkQ29sb3JTZWxlY3RlZChjb2xvci50b0hleFN0cmluZygpKVxuICB9XG5cbiAgX29uU1ZhbHVlQ2hhbmdlKHM6IG51bWJlcikge1xuICAgIGNvbnN0IHsgaCwgdiB9ID0gdGhpcy5fZ2V0Q29sb3IoKVxuICAgIHRoaXMuX29uQ29sb3JDaGFuZ2UoeyBoLCBzLCB2IH0pXG4gIH1cblxuICBfb25WVmFsdWVDaGFuZ2UodjogbnVtYmVyKSB7XG4gICAgY29uc3QgeyBoLCBzIH0gPSB0aGlzLl9nZXRDb2xvcigpXG4gICAgdGhpcy5fb25Db2xvckNoYW5nZSh7IGgsIHMsIHYgfSlcbiAgfVxuXG4gIF9vbkNvbG9yQ2hhbmdlKGNvbG9yOiB7IGg6IG51bWJlcjsgczogYW55OyB2OiBhbnkgfSkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBjb2xvciB9KVxuICAgIGlmICh0aGlzLnByb3BzLm9uQ29sb3JDaGFuZ2UpIHtcbiAgICAgIHRoaXMucHJvcHMub25Db2xvckNoYW5nZShjb2xvcilcbiAgICB9XG4gIH1cblxuICBfb25MYXlvdXQobDoge1xuICAgIG5hdGl2ZUV2ZW50OiB7XG4gICAgICBsYXlvdXQ6IHsgd2lkdGg6IG51bWJlcjsgaGVpZ2h0OiBudW1iZXI7IHg6IG51bWJlcjsgeTogbnVtYmVyIH07XG4gICAgfTtcbiAgfSkge1xuICAgIHRoaXMuX2xheW91dCA9IGwubmF0aXZlRXZlbnQubGF5b3V0XG4gICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSB0aGlzLl9sYXlvdXRcbiAgICBjb25zdCBwaWNrZXJTaXplID0gTWF0aC5taW4od2lkdGgsIGhlaWdodClcbiAgICBpZiAodGhpcy5zdGF0ZS5waWNrZXJTaXplICE9PSBwaWNrZXJTaXplKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgcGlja2VyU2l6ZSB9KVxuICAgIH1cbiAgICAvLyBsYXlvdXQueCwgbGF5b3V0LnkgaXMgYWx3YXlzIDBcbiAgICAvLyB3ZSBhbHdheXMgbWVhc3VyZSBiZWNhdXNlIGxheW91dCBpcyB0aGUgc2FtZSBldmVuIHRob3VnaCBwaWNrZXIgaXMgbW92ZWQgb24gdGhlIHBhZ2VcbiAgICBJbnRlcmFjdGlvbk1hbmFnZXIucnVuQWZ0ZXJJbnRlcmFjdGlvbnMoKCkgPT4ge1xuICAgICAgLy8gbWVhc3VyZSBvbmx5IGFmdGVyIChwb3NzaWJsZSkgYW5pbWF0aW9uIGVuZGVkXG4gICAgICB0aGlzLnJlZnMucGlja2VyQ29udGFpbmVyICYmXG4gICAgICAodGhpcy5yZWZzLnBpY2tlckNvbnRhaW5lciBhcyBhbnkpLm1lYXN1cmUoXG4gICAgICAgIChcbiAgICAgICAgICB4OiBudW1iZXIsXG4gICAgICAgICAgeTogbnVtYmVyLFxuICAgICAgICAgIHdpZHRoOiBudW1iZXIsXG4gICAgICAgICAgaGVpZ2h0OiBudW1iZXIsXG4gICAgICAgICAgcGFnZVg6IG51bWJlcixcbiAgICAgICAgICBwYWdlWTogbnVtYmVyXG4gICAgICAgICkgPT4ge1xuICAgICAgICAgIC8vIHBpY2tlciBwb3NpdGlvbiBpbiB0aGUgc2NyZWVuXG4gICAgICAgICAgdGhpcy5fcGFnZVggPSBwYWdlWFxuICAgICAgICAgIHRoaXMuX3BhZ2VZID0gcGFnZVlcbiAgICAgICAgfVxuICAgICAgKVxuICAgIH0pXG4gIH1cblxuICBfaGFuZGxlQ29sb3JDaGFuZ2UgPSAoeyB4LCB5IH06IFBvaW50MkQpID0+IHtcbiAgICBjb25zdCB7IHMsIHYgfSA9IHRoaXMuX2dldENvbG9yKClcbiAgICBjb25zdCBtYXJnaW5MZWZ0ID0gKHRoaXMuX2xheW91dC53aWR0aCAtIHRoaXMuc3RhdGUucGlja2VyU2l6ZSkgLyAyXG4gICAgY29uc3QgbWFyZ2luVG9wID0gKHRoaXMuX2xheW91dC5oZWlnaHQgLSB0aGlzLnN0YXRlLnBpY2tlclNpemUpIC8gMlxuICAgIGNvbnN0IHJlbGF0aXZlWCA9IHggLSB0aGlzLl9wYWdlWCAtIG1hcmdpbkxlZnRcbiAgICBjb25zdCByZWxhdGl2ZVkgPSB5IC0gdGhpcy5fcGFnZVkgLSBtYXJnaW5Ub3BcbiAgICBjb25zdCBoID0gdGhpcy5fY29tcHV0ZUhWYWx1ZShyZWxhdGl2ZVgsIHJlbGF0aXZlWSlcbiAgICB0aGlzLl9vbkNvbG9yQ2hhbmdlKHsgaCwgcywgdiB9KVxuXG4gICAgcmV0dXJuIHRydWVcbiAgfTtcblxuICBfY29tcHV0ZUhWYWx1ZSh4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgIGNvbnN0IG14ID0gdGhpcy5zdGF0ZS5waWNrZXJTaXplIC8gMlxuICAgIGNvbnN0IG15ID0gdGhpcy5zdGF0ZS5waWNrZXJTaXplIC8gMlxuICAgIGNvbnN0IGR4ID0geCAtIG14XG4gICAgY29uc3QgZHkgPSB5IC0gbXlcbiAgICBjb25zdCByYWQgPSBNYXRoLmF0YW4yKGR4LCBkeSkgKyBNYXRoLlBJICsgTWF0aC5QSSAvIDJcbiAgICByZXR1cm4gKChyYWQgKiAxODApIC8gTWF0aC5QSSkgJSAzNjBcbiAgfVxuXG4gIF9oVmFsdWVUb1JhZChkZWc6IG51bWJlcikge1xuICAgIGNvbnN0IHJhZCA9IChkZWcgKiBNYXRoLlBJKSAvIDE4MFxuICAgIHJldHVybiByYWQgLSBNYXRoLlBJIC0gTWF0aC5QSSAvIDJcbiAgfVxuXG4gIF9nZXRTbGlkZXIoKTogdHlwZW9mIFNsaWRlciB7XG4gICAgaWYgKHRoaXMucHJvcHMuaGlkZVNsaWRlcnMpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5zbGlkZXJDb21wb25lbnQpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLnNsaWRlckNvbXBvbmVudCBhcyBhbnlcbiAgICB9XG5cbiAgICBpZiAoIVNsaWRlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBcIllvdSBuZWVkIHRvIGluc3RhbGwgYEByZWFjdC1uYXRpdmUtY29tbXVuaXR5L3NsaWRlcmAgYW5kIHBhc3MgaXQgKG9yIGFueSBvdGhlciBTbGlkZXIgY29tcGF0aWJsZSBjb21wb25lbnQpIGFzIGBzbGlkZXJDb21wb25lbnRgIHByb3BcIlxuICAgICAgKVxuICAgIH1cblxuICAgIHJldHVybiBTbGlkZXJcbiAgfVxuXG4gIGdldENvbG9yKCkge1xuICAgIHJldHVybiB0aW55Y29sb3IodGhpcy5fZ2V0Q29sb3IoKSkudG9IZXhTdHJpbmcoKVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgcGlja2VyU2l6ZSB9ID0gdGhpcy5zdGF0ZVxuICAgIGNvbnN0IHsgb2xkQ29sb3IsIGluZGljYXRvckNvbG9yT3ZlcnJpZGUsIHN0eWxlIH0gPSB0aGlzLnByb3BzXG5cbiAgICBjb25zdCBjb2xvciA9IHRoaXMuX2dldENvbG9yKClcbiAgICBjb25zdCB7IGgsIHMsIHYgfSA9IGNvbG9yXG4gICAgY29uc3QgYW5nbGUgPSB0aGlzLl9oVmFsdWVUb1JhZChoKVxuICAgIGNvbnN0IHNlbGVjdGVkQ29sb3IgPSB0aW55Y29sb3IoY29sb3IpLnRvSGV4U3RyaW5nKClcbiAgICBjb25zdCBpbmRpY2F0b3JDb2xvciA9IHRpbnljb2xvcih7IGgsIHM6IDEsIHY6IDEgfSkudG9IZXhTdHJpbmcoKVxuXG4gICAgY29uc3QgY29tcHV0ZWQgPSBtYWtlQ29tcHV0ZWRTdHlsZXMoe1xuICAgICAgcGlja2VyU2l6ZSxcbiAgICAgIHNlbGVjdGVkQ29sb3IsXG4gICAgICBpbmRpY2F0b3JDb2xvcjogaW5kaWNhdG9yQ29sb3JPdmVycmlkZSA/PyBpbmRpY2F0b3JDb2xvcixcbiAgICAgIG9sZENvbG9yLFxuICAgICAgYW5nbGUsXG4gICAgICBpc1JUTDogdGhpcy5faXNSVEwsXG4gICAgfSlcblxuICAgIGNvbnN0IFNsaWRlckNvbXAgPSB0aGlzLl9nZXRTbGlkZXIoKVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZX0+XG4gICAgICAgIDxWaWV3XG4gICAgICAgICAgb25MYXlvdXQ9e3RoaXMuX29uTGF5b3V0fVxuICAgICAgICAgIHJlZj1cInBpY2tlckNvbnRhaW5lclwiXG4gICAgICAgICAgc3R5bGU9e3N0eWxlcy5waWNrZXJDb250YWluZXJ9XG4gICAgICAgID5cbiAgICAgICAgICB7IXBpY2tlclNpemUgPyBudWxsIDogKFxuICAgICAgICAgICAgPFZpZXc+XG4gICAgICAgICAgICAgIDxWaWV3XG4gICAgICAgICAgICAgICAgey4uLnRoaXMuX3BpY2tlclJlc3BvbmRlci5wYW5IYW5kbGVyc31cbiAgICAgICAgICAgICAgICBzdHlsZT17W2NvbXB1dGVkLnBpY2tlcl19XG4gICAgICAgICAgICAgICAgY29sbGFwc2FibGU9e2ZhbHNlfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPEltYWdlXG4gICAgICAgICAgICAgICAgICBzb3VyY2U9e3JlcXVpcmUoXCIuLi9yZXNvdXJjZXMvY29sb3ItY2lyY2xlLnBuZ1wiKX1cbiAgICAgICAgICAgICAgICAgIHJlc2l6ZU1vZGU9XCJjb250YWluXCJcbiAgICAgICAgICAgICAgICAgIHN0eWxlPXtbc3R5bGVzLnBpY2tlckltYWdlXX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxWaWV3XG4gICAgICAgICAgICAgICAgICBzdHlsZT17W3N0eWxlcy5waWNrZXJJbmRpY2F0b3IsIGNvbXB1dGVkLnBpY2tlckluZGljYXRvcl19XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9WaWV3PlxuICAgICAgICAgICAgICB7b2xkQ29sb3IgJiYgKFxuICAgICAgICAgICAgICAgIDxUb3VjaGFibGVPcGFjaXR5XG4gICAgICAgICAgICAgICAgICBzdHlsZT17W3N0eWxlcy5zZWxlY3RlZFByZXZpZXcsIGNvbXB1dGVkLnNlbGVjdGVkUHJldmlld119XG4gICAgICAgICAgICAgICAgICBvblByZXNzPXt0aGlzLl9vbkNvbG9yU2VsZWN0ZWR9XG4gICAgICAgICAgICAgICAgICBhY3RpdmVPcGFjaXR5PXswLjd9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAge29sZENvbG9yICYmIChcbiAgICAgICAgICAgICAgICA8VG91Y2hhYmxlT3BhY2l0eVxuICAgICAgICAgICAgICAgICAgc3R5bGU9e1tzdHlsZXMub3JpZ2luYWxQcmV2aWV3LCBjb21wdXRlZC5vcmlnaW5hbFByZXZpZXddfVxuICAgICAgICAgICAgICAgICAgb25QcmVzcz17dGhpcy5fb25PbGRDb2xvclNlbGVjdGVkfVxuICAgICAgICAgICAgICAgICAgYWN0aXZlT3BhY2l0eT17MC43fVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIHshb2xkQ29sb3IgJiYgKFxuICAgICAgICAgICAgICAgIDxUb3VjaGFibGVPcGFjaXR5XG4gICAgICAgICAgICAgICAgICBzdHlsZT17W1xuICAgICAgICAgICAgICAgICAgICBzdHlsZXMuc2VsZWN0ZWRGdWxsUHJldmlldyxcbiAgICAgICAgICAgICAgICAgICAgY29tcHV0ZWQuc2VsZWN0ZWRGdWxsUHJldmlldyxcbiAgICAgICAgICAgICAgICAgIF19XG4gICAgICAgICAgICAgICAgICBvblByZXNzPXt0aGlzLl9vbkNvbG9yU2VsZWN0ZWR9XG4gICAgICAgICAgICAgICAgICBhY3RpdmVPcGFjaXR5PXswLjd9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvVmlldz5cbiAgICAgICAgICApfVxuICAgICAgICA8L1ZpZXc+XG4gICAgICAgIHt0aGlzLnByb3BzLmhpZGVTbGlkZXJzID8gbnVsbCA6IChcbiAgICAgICAgICA8Vmlldz5cbiAgICAgICAgICAgIDxTbGlkZXJDb21wIHZhbHVlPXtzfSBvblZhbHVlQ2hhbmdlPXt0aGlzLl9vblNWYWx1ZUNoYW5nZX0gLz5cbiAgICAgICAgICAgIDxTbGlkZXJDb21wIHZhbHVlPXt2fSBvblZhbHVlQ2hhbmdlPXt0aGlzLl9vblZWYWx1ZUNoYW5nZX0gLz5cbiAgICAgICAgICA8L1ZpZXc+XG4gICAgICAgICl9XG4gICAgICA8L1ZpZXc+XG4gICAgKVxuICB9XG59XG5cbmNvbnN0IG1ha2VDb21wdXRlZFN0eWxlcyA9ICh7XG4gIGluZGljYXRvckNvbG9yLFxuICBzZWxlY3RlZENvbG9yLFxuICBvbGRDb2xvcixcbiAgYW5nbGUsXG4gIHBpY2tlclNpemUsXG4gIGlzUlRMLFxufSkgPT4ge1xuICBjb25zdCBzdW1tYXJ5U2l6ZSA9IDAuNSAqIHBpY2tlclNpemVcbiAgY29uc3QgaW5kaWNhdG9yUGlja2VyUmF0aW8gPSA0MiAvIDUxMCAvLyBjb21wdXRlZCBmcm9tIHBpY2tlciBpbWFnZVxuICBjb25zdCBpbmRpY2F0b3JTaXplID0gaW5kaWNhdG9yUGlja2VyUmF0aW8gKiBwaWNrZXJTaXplXG4gIGNvbnN0IHBpY2tlclBhZGRpbmcgPSBpbmRpY2F0b3JTaXplIC8gM1xuICBjb25zdCBpbmRpY2F0b3JSYWRpdXMgPSBwaWNrZXJTaXplIC8gMiAtIGluZGljYXRvclNpemUgLyAyIC0gcGlja2VyUGFkZGluZ1xuICBjb25zdCBteCA9IHBpY2tlclNpemUgLyAyXG4gIGNvbnN0IG15ID0gcGlja2VyU2l6ZSAvIDJcbiAgY29uc3QgZHggPSBNYXRoLmNvcyhhbmdsZSkgKiBpbmRpY2F0b3JSYWRpdXNcbiAgY29uc3QgZHkgPSBNYXRoLnNpbihhbmdsZSkgKiBpbmRpY2F0b3JSYWRpdXNcbiAgcmV0dXJuIHtcbiAgICBwaWNrZXI6IHtcbiAgICAgIHBhZGRpbmc6IHBpY2tlclBhZGRpbmcsXG4gICAgICB3aWR0aDogcGlja2VyU2l6ZSxcbiAgICAgIGhlaWdodDogcGlja2VyU2l6ZSxcbiAgICB9LFxuICAgIHBpY2tlckluZGljYXRvcjoge1xuICAgICAgdG9wOiBteCArIGR4IC0gaW5kaWNhdG9yU2l6ZSAvIDIsXG4gICAgICBbaXNSVEwgPyBcInJpZ2h0XCIgOiBcImxlZnRcIl06IG15ICsgZHkgLSBpbmRpY2F0b3JTaXplIC8gMixcbiAgICAgIHdpZHRoOiBpbmRpY2F0b3JTaXplLFxuICAgICAgaGVpZ2h0OiBpbmRpY2F0b3JTaXplLFxuICAgICAgYm9yZGVyUmFkaXVzOiBpbmRpY2F0b3JTaXplIC8gMixcbiAgICAgIGJhY2tncm91bmRDb2xvcjogaW5kaWNhdG9yQ29sb3IsXG4gICAgfSxcbiAgICBzZWxlY3RlZFByZXZpZXc6IHtcbiAgICAgIHdpZHRoOiBzdW1tYXJ5U2l6ZSAvIDIsXG4gICAgICBoZWlnaHQ6IHN1bW1hcnlTaXplLFxuICAgICAgdG9wOiBwaWNrZXJTaXplIC8gMiAtIHN1bW1hcnlTaXplIC8gMixcbiAgICAgIGxlZnQ6IE1hdGguZmxvb3IocGlja2VyU2l6ZSAvIDIpLFxuICAgICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6IHN1bW1hcnlTaXplIC8gMixcbiAgICAgIGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOiBzdW1tYXJ5U2l6ZSAvIDIsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHNlbGVjdGVkQ29sb3IsXG4gICAgfSxcbiAgICBvcmlnaW5hbFByZXZpZXc6IHtcbiAgICAgIHdpZHRoOiBNYXRoLmNlaWwoc3VtbWFyeVNpemUgLyAyKSxcbiAgICAgIGhlaWdodDogc3VtbWFyeVNpemUsXG4gICAgICB0b3A6IHBpY2tlclNpemUgLyAyIC0gc3VtbWFyeVNpemUgLyAyLFxuICAgICAgbGVmdDogcGlja2VyU2l6ZSAvIDIgLSBzdW1tYXJ5U2l6ZSAvIDIsXG4gICAgICBib3JkZXJUb3BMZWZ0UmFkaXVzOiBzdW1tYXJ5U2l6ZSAvIDIsXG4gICAgICBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiBzdW1tYXJ5U2l6ZSAvIDIsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IG9sZENvbG9yLFxuICAgIH0sXG4gICAgc2VsZWN0ZWRGdWxsUHJldmlldzoge1xuICAgICAgd2lkdGg6IHN1bW1hcnlTaXplLFxuICAgICAgaGVpZ2h0OiBzdW1tYXJ5U2l6ZSxcbiAgICAgIHRvcDogcGlja2VyU2l6ZSAvIDIgLSBzdW1tYXJ5U2l6ZSAvIDIsXG4gICAgICBsZWZ0OiBwaWNrZXJTaXplIC8gMiAtIHN1bW1hcnlTaXplIC8gMixcbiAgICAgIGJvcmRlclJhZGl1czogc3VtbWFyeVNpemUgLyAyLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBzZWxlY3RlZENvbG9yLFxuICAgIH0sXG4gIH1cbn1cblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBwaWNrZXJDb250YWluZXI6IHtcbiAgICBmbGV4OiAxLFxuICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gIH0sXG4gIHBpY2tlckltYWdlOiB7XG4gICAgZmxleDogMSxcbiAgICB3aWR0aDogbnVsbCxcbiAgICBoZWlnaHQ6IG51bGwsXG4gIH0sXG4gIHBpY2tlckluZGljYXRvcjoge1xuICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgLy8gU2hhZG93IG9ubHkgd29ya3Mgb24gaU9TLlxuICAgIHNoYWRvd0NvbG9yOiBcImJsYWNrXCIsXG4gICAgc2hhZG93T3BhY2l0eTogMC4zLFxuICAgIHNoYWRvd09mZnNldDogeyB3aWR0aDogMywgaGVpZ2h0OiAzIH0sXG4gICAgc2hhZG93UmFkaXVzOiA0LFxuXG4gICAgLy8gVGhpcyB3aWxsIGVsZXZhdGUgdGhlIHZpZXcgb24gQW5kcm9pZCwgY2F1c2luZyBzaGFkb3cgdG8gYmUgZHJhd24uXG4gICAgZWxldmF0aW9uOiA1LFxuICB9LFxuICBzZWxlY3RlZFByZXZpZXc6IHtcbiAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgIGJvcmRlckxlZnRXaWR0aDogMCxcbiAgfSxcbiAgb3JpZ2luYWxQcmV2aWV3OiB7XG4gICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICBib3JkZXJSaWdodFdpZHRoOiAwLFxuICB9LFxuICBzZWxlY3RlZEZ1bGxQcmV2aWV3OiB7XG4gICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgfSxcbiAgcGlja2VyQWxpZ25tZW50OiB7XG4gICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgfSxcbn0pXG4iXX0=